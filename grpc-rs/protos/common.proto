syntax = "proto3";
package proto;


message Empty {
}

message Timestamp {

    // Represents seconds of UTC time since Unix epoch
    // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    // 9999-12-31T23:59:59Z inclusive.
    int64 seconds = 1;

    // Non-negative fractions of a second at nanosecond resolution. Negative
    // second values with fractions must still have non-negative nanos values
    // that count forward in time. Must be from 0 to 999,999,999
    // inclusive.
    int32 nanos = 2;
}


enum Status {
    UNKNOWN = 0;
    SUCCESS = 200;
    BAD_REQUEST = 400;
    FORBIDDEN = 403;
    NOT_FOUND = 404;
    REQUEST_ENTITY_TOO_LARGE = 413;
    INTERNAL_SERVER_ERROR = 500;
    NOT_IMPLEMENTED = 501;
    SERVICE_UNAVAILABLE = 503;
}



// ------------------------------- contract.proto1 call -------------------------------
message Proposal {
    enum ProposalType {
        QUERY = 0; // Used for messages which query contract.proto1
        INVOKE = 1; // Used for messages which invoke contract.proto1
        CONFIG = 2; // Used for messages which express the channel config
        CONFIG_UPDATE = 3; // Used for transactions which update the channel config
    }

    ProposalType proposal_type = 1;
    Timestamp timestamp = 2;
    string channel_id = 3;
    string contract = 4;
    string tx_id = 5;
    bytes creator = 6;
    bytes nonce = 7;
    repeated bytes args = 8;
    map<string, bytes> decorations = 9;
}

message SignedProposal {
    Proposal proposal = 1;
    bytes signature = 2;
}
// ------------------------------- contract.proto1 call -------------------------------

message Envelope {
    bytes payload = 1;
    bytes signature = 2;
}


message ProposalResponse {

    // A status code that should follow the HTTP status codes.
    int32 status = 1;

    // A message associated with the response code.
    string message = 2;

    // A payload that can be used to include metadata with this response.
    bytes payload = 3;
}

//--------------------------------
message ContractEvent {
    string contract = 1;
    string tx_id = 2;
    string event_name = 3;
    bytes payload = 4;
}

// -------------------------------
message Transaction {
    SignedProposal signed_proposal = 1;
    ProposalResponse proposalResponse = 2;
    ContractEvent contract_event = 3;
}
