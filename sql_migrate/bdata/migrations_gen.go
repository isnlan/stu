// Package bdata Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// migrations/1_init.sql
package bdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x6e\xd3\x40\x10\xbe\xfb\x29\xe6\x56\x47\x50\x89\xf4\x54\x29\xca\xc1\xb1\x37\xad\x85\x7f\xa2\xf5\x5a\xd0\x93\xbd\x76\x96\x78\x45\xbc\x8e\xd6\x9b\xa2\x3e\x01\x70\xa8\x38\x44\x55\x7a\xe1\x86\xb8\x20\x50\x25\x10\x42\x95\xe0\x69\x1a\x4b\x79\x0b\xe4\x38\x25\x94\x24\xdc\xec\x9d\xf9\x7e\x66\xe6\xd3\x0e\x0f\xe1\x51\xce\x47\x92\x2a\x06\xe1\x44\xb3\xb0\x3f\x00\x62\xf4\x1c\x04\x76\x1f\xd0\x73\x3b\x20\x01\xc4\xc9\xb8\x48\x5f\xc6\x1d\xcd\xc4\xc8\x20\x68\x5d\x5f\xbf\x02\xe8\x1a\x40\x2c\xa6\x79\xc2\x64\x0c\x09\x1f\x71\xa1\xf4\xa3\x27\x2d\xf0\x7c\x02\x5e\xe8\x38\x60\xfa\xae\x8b\x3c\x02\x07\x8b\x9f\xb3\xc5\xdb\xcb\xc5\xfb\xf9\xf2\xd3\xf5\xe2\xf6\xe3\xc1\xe3\x1a\x39\x91\xec\x9c\x17\xd3\x32\xca\x68\x99\xc5\x70\x4e\x65\xc2\x05\x95\x17\x7a\xfb\xe8\xb8\xd5\x10\x58\xa8\x6f\x84\xce\x16\xdb\x8a\xea\x94\x96\x59\x43\xb4\x1b\xbf\xdf\xc4\x06\x39\xa4\x8a\xee\x91\xdf\x82\x57\x57\x37\xd5\xe5\x97\x0d\x56\x49\x2a\x4a\x9a\x2a\x5e\x88\x28\x2d\xa6\x42\xc5\x50\x2f\xa0\xdd\xfe\xaf\xf6\xdd\x8f\xcf\x77\xb7\x1f\xaa\xeb\x59\x75\x75\xb3\x7c\xfd\xae\xa1\x4a\x33\x2a\x04\x1b\x47\x7c\xb8\xf2\x91\x66\x54\x36\x2e\xcc\x53\x03\x1b\x26\x41\x18\x02\x44\x60\xaa\x5e\x1c\x83\xe9\x3b\x4e\x7d\x8b\xfa\x27\x1a\x31\xc1\x24\x1d\x47\x29\xdf\xa1\xb9\x9c\xfd\xb2\xad\xb5\x57\x9e\xb3\x52\xd1\x7c\x12\xc3\x9f\x4f\xfd\xef\x4b\xdd\x2f\xda\x0c\x31\x46\x1e\x89\x88\xed\xa2\x80\x18\xee\xa0\xee\xf2\x3d\x08\x07\x56\x2d\xba\xb3\xbc\xd9\xd0\xfc\xfb\x72\xfe\xad\x7a\xf3\x75\x25\x3a\xc0\xb6\x6b\xe0\x33\x78\x8a\xce\x40\xbf\x8f\x49\x0b\xc2\xc0\xf6\x4e\xa0\x47\x30\x42\x5a\x0b\x90\x77\x62\x7b\x08\xba\x60\x0b\x51\x58\xbd\x7f\x06\xee\x3e\x1c\xb9\xbb\x35\x34\xf6\x9f\x45\x7d\x1f\xbb\x46\xdd\x6b\x5d\x08\x9a\xf3\xb4\xa3\x3d\xc8\xb6\x55\xbc\x12\xda\x50\x16\x13\x50\x34\x19\x33\x58\x85\xb7\xa3\xfd\x0e\x00\x00\xff\xff\x06\x32\xa8\xe8\x00\x03\x00\x00")

func _1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initSql,
		"1_init.sql",
	)
}

func _1_initSql() (*asset, error) {
	bytes, err := _1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_init.sql", size: 768, mode: os.FileMode(420), modTime: time.Unix(1566547726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_init.sql": _1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_init.sql": &bintree{_1_initSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
